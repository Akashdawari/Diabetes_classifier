# -*- coding: utf-8 -*-
"""Dibetes_classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ffkxCbhmwT-BS0uByIP1551fH4phtnw
"""



import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split

from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC

from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import VotingClassifier
from sklearn.metrics import accuracy_score

from sklearn.preprocessing import StandardScaler

df = pd.read_csv("diabetes.csv")
# df.info()
df.head()

df["Outcome"].value_counts()

df.hist(figsize=(10,10))
plt.show()

X = df.drop("Outcome", axis=1)
y = df["Outcome"].copy()

X = X.rename_axis('ID').values
y = y.rename_axis('ID').values

scaling = StandardScaler()
X = scaling.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

log_clf = LogisticRegression()
rnd_clf = RandomForestClassifier()
svm_clf = SVC(probability=True)

voting_clf = VotingClassifier(
estimators=[('lr', log_clf), ('rf', rnd_clf), ('svc', svm_clf)],
voting='soft'
)
voting_clf.fit(X_train, y_train)

for clf in (log_clf, rnd_clf, svm_clf, voting_clf):
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    print(clf.__class__.__name__, accuracy_score(y_test, y_pred))

from sklearn.linear_model import Perceptron

per_clf = Perceptron(random_state=42)

per_clf.fit(X_train, y_train)

y_pred = per_clf.predict(X_test)

accuracy_score(y_test, y_pred)

